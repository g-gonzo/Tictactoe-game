{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gigonz\\\\Documents\\\\GitHub\\\\tictactoegame\\\\src\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Square from \"./Square\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Restart({\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"restart\",\n    class: \"btn btn-secondary\",\n    onClick: onClick,\n    children: \"Shall we play a game? (reset)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Restart;\n\nfunction Game() {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXNext, setIsXNext] = useState(true);\n  const nextSymbol = isXNext ? \"X\" : \"O\";\n  const winner = calculateWinner(squares);\n\n  function renderRestartButton() {\n    return /*#__PURE__*/_jsxDEV(Restart, {\n      onClick: () => {\n        setSquares(Array(9).fill(null));\n        setIsXNext(true);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n\n  function renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onClick: () => {\n        if (squares[i] != null || winner != null) {\n          return;\n        }\n\n        const nextSquares = squares.slice();\n        nextSquares[i] = isXNext ? \"X\" : \"O\";\n        setSquares(nextSquares);\n        setIsXNext(!isXNext);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  }\n\n  function getStatus() {\n    if (winner) {\n      return \"Winner!: \" + winner;\n    } else if (isBoardFull(squares)) {\n      return \"Draw!\";\n    } else {\n      return \"Next player: \" + (isXNext ? \"X\" : \"O\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: getStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"restart-button\",\n        children: renderRestartButton()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"mGIQpJhPzamqOAfNEpu4Dn1fc0s=\");\n\n_c2 = Game;\n\nfunction calculateWinner(squares) {\n  const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nfunction isBoardFull(squares) {\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] == null) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default Game;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Restart\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"sources":["C:/Users/gigonz/Documents/GitHub/tictactoegame/src/Game.js"],"names":["React","useState","Square","Restart","onClick","Game","squares","setSquares","Array","fill","isXNext","setIsXNext","nextSymbol","winner","calculateWinner","renderRestartButton","renderSquare","i","nextSquares","slice","getStatus","isBoardFull","possibleLines","length","a","b","c"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nfunction Restart({ onClick }) {\r\n    return (\r\n        <button className=\"restart\" class=\"btn btn-secondary\" onClick={onClick}>\r\n            Shall we play a game? (reset)\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction Game() {\r\n    const [squares, setSquares] = useState(Array(9).fill(null));\r\n    const [isXNext, setIsXNext] = useState(true);\r\n    const nextSymbol = isXNext ? \"X\" : \"O\";\r\n    const winner = calculateWinner(squares);\r\n\r\n    function renderRestartButton() {\r\n        return (\r\n            <Restart\r\n                onClick={() => {\r\n                    setSquares(Array(9).fill(null));\r\n                    setIsXNext(true);\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    function renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={squares[i]}\r\n                onClick={() => {\r\n                    if (squares[i] != null || winner != null) {\r\n                        return;\r\n                    }\r\n                    const nextSquares = squares.slice();\r\n                    nextSquares[i] = (isXNext ? \"X\" : \"O\");\r\n                    setSquares(nextSquares);\r\n                    setIsXNext(!isXNext);\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    function getStatus() {\r\n        if (winner) {\r\n            return \"Winner!: \" + winner;\r\n        } else if (isBoardFull(squares)) {\r\n            return \"Draw!\";\r\n        } else {\r\n            return \"Next player: \" + (isXNext ? \"X\" : \"O\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <div className=\"board-row\">\r\n                        {renderSquare(0)}\r\n                        {renderSquare(1)}\r\n                        {renderSquare(2)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                        {renderSquare(3)}\r\n                        {renderSquare(4)}\r\n                        {renderSquare(5)}\r\n                    </div>\r\n                    <div className=\"board-row\">\r\n                        {renderSquare(6)}\r\n                        {renderSquare(7)}\r\n                        {renderSquare(8)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"game-info\">{getStatus()}</div>\r\n                <div className=\"restart-button\">{renderRestartButton()}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const possibleLines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < possibleLines.length; i++) {\r\n        const [a, b, c] = possibleLines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isBoardFull(squares) {\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] == null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}