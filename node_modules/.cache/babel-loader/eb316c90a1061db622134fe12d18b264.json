{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gigonz\\\\Documents\\\\GitHub\\\\tictactoegame\\\\src\\\\Square.js\";\nimport React from \"react\";\nimport Game from \"./Game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square({\n  value,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    id: \"box\",\n    className: \"square\",\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Square;\n\nfunction calculateWinner(squares) {\n  const possibleLines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // go over all possibly winning lines and check if they consist of only X's/only O's\n\n  for (let i = 0; i < possibleLines.length; i++) {\n    const [a, b, c] = possibleLines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}\n\nexport default Square;\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["C:/Users/gigonz/Documents/GitHub/tictactoegame/src/Square.js"],"names":["React","Game","Square","value","onClick","calculateWinner","squares","possibleLines","i","length","a","b","c"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAhB,EAAoC;AAChC,sBACI;AAAQ,IAAA,EAAE,EAAC,KAAX;AAAiB,IAAA,SAAS,EAAC,QAA3B;AAAoC,IAAA,OAAO,EAAEA,OAA7C;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KANQD,M;;AAQT,SAASG,eAAT,CAAyBC,OAAzB,EAAkC;AAC9B,QAAMC,aAAa,GAAG,CAClB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkB,EAElB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFkB,EAGlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHkB,EAIlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJkB,EAKlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALkB,EAMlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANkB,EAOlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPkB,EAQlB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARkB,CAAtB,CAD8B,CAW9B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,aAAa,CAACC,CAAD,CAA/B;;AACA,QAAIF,OAAO,CAACI,CAAD,CAAP,IAAcJ,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACK,CAAD,CAApC,IAA2CL,OAAO,CAACI,CAAD,CAAP,KAAeJ,OAAO,CAACM,CAAD,CAArE,EAA0E;AACtE,aAAON,OAAO,CAACI,CAAD,CAAd;AACH;AACJ;;AACD,SAAO,IAAP;AACH;;AAED,eAAeR,MAAf","sourcesContent":["import React from \"react\";\r\nimport Game from \"./Game\";\r\n\r\nfunction Square({ value, onClick }) {\r\n    return (\r\n        <button id=\"box\" className=\"square\" onClick={onClick}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const possibleLines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    // go over all possibly winning lines and check if they consist of only X's/only O's\r\n    for (let i = 0; i < possibleLines.length; i++) {\r\n        const [a, b, c] = possibleLines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default Square;"]},"metadata":{},"sourceType":"module"}